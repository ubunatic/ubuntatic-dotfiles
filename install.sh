#!/usr/bin/env bash


BASE_FILES=(
.tmux.conf
.vimrc
.zshrc
.shellibrc
.shellib
.ctags
)

COPY_FILES=(
.profile
.vimplugins
)

warn(){ echo $@ 1>&2; false;  }
fail(){ echo $@ 1>&2; exit 1; }

target_exists(){ test -e "$@" || test -L "$@";  }
file_exists()  { test -e "$@";                  }

create_link()  { ln -snr "$1" "$2";             }
update_link()  { ln $UPDATE_OPT -snr "$1" "$2"; }

clean(){
	if $CLEAN; then
		trg="$@"
		if file_exists "$trg"; then
			if backups=(`find "$trg"* -maxdepth 0 | grep -e "$trg[0-9~]\+"`)
			then rm ${backups[@]}; warn "removed backups: ${backups[@]}"
			fi
		else
			fail "internal error: cannot clean backups of non-existing links"
		fi
	fi
}

usage() {
	cat 1>&2 <<-EOF
	Usage: $0 [OPTIONS]

	Options:

		--all     create links for copy-once files
		--force   overwrite existng links
		--clean   removes backup files TRG_DIR/FILE[0-9~]+
		--diff    show diff for updated or skipped files

		--help    show this usage info
		--debug   more logging

	Files:

		Main files are:      ${BASE_FILES[@]}
		Copy-once files are: ${COPY_FILES[@]}

	EOF
}

errors=0
created=0
skipped=0
updated=0
files_updated=0
files_created=0
files_skipped=0

SRC_DIR=`readlink -f $(dirname "$0")` || fail "could not determine script dir"
TRG_DIR="$HOME"

FORCE=false
CLEAN=false
DIFF=false
FILES=(${BASE_FILES[@]})
test -z "$DEBUG" && DEBUG=false

# parse options
for opt in $@; do case $opt in
	--help)  usage; exit 1;;
	--all)   FILES=(${BASE_FILES[@]} ${COPY_FILES[@]})
		      COPY_FILES=();;
	--clean) CLEAN=true;;
	--force) FORCE=true;;
	--debug) DEBUG=true;;
	--diff)  DIFF=true;;
	*)       ;;
esac done

UPDATE_OPT="-b"

# access target and source dirs
test -d "$TRG_DIR" || fail "TRG_DIR dir not found: $TRG_DIR"
cd "$SRC_DIR"      || fail "cannot access source dir: $SRC_DIR"

warn "using target dir: $TRG_DIR"

# create/update links
for src in ${FILES[@]}; do
	lnk="$TRG_DIR/$src"
	$DEBUG && warn "processing link: $lnk -> $SRC_DIR/$src"
	if   ! file_exists $src; then

		(( errors++ )); warn "source file not found: $src"

	elif ! target_exists $lnk; then

		if create_link "$src" "$lnk"
		then (( created++ )); warn "created link: $lnk"; clean $lnk
		else (( errors++  )); warn "failed to create link: $lnk"
		fi

	else
		rl_src="`readlink -f "$src"`"
		rl_lnk="`readlink -f "$lnk"`"
		if test "$rl_src" = "$rl_lnk"
		then (( skipped++ )); warn "link already up-to-date: $lnk -> $rl_src"
		elif $FORCE; then
			if update_link "$src" "$lnk"
			then (( updated++ )); warn "updated link: $lnk"; clean $lnk
			else (( errors++  )); warn "failed to update link: $lnk"
			fi
		else (( skipped++ )); warn "skipping existing link: $lnk";
		fi
	fi

	if $DEBUG; then warn $lnk*; warn; fi

done

# add customizable copy-once files
for src in ${COPY_FILES[@]}; do
	trg="$TRG_DIR/$src"
	if file_exists $trg;
	then (( files_skipped++ )); warn "preserving existing file: $trg"
	elif cp "$src" "$trg"
	then (( files_created++ )); warn "copied file: $trg"
	fi
	if $DIFF; then
		warn "diff $src $trg"
		diff $src "$trg" 1>&2
	fi
done

# add/update source script
source_host="$TRG_DIR/.profile"
source_tag="# generated by shellib"
source_msg="(do not edit manually)"
source_script="source $TRG_DIR/.shellib/shellib.sh"
source_line="$source_script $source_tag $source_msg"
SED_OPTS="--follow-symlinks -i~"

if host_line=`grep -E "$source_tag" "$source_host"`; then

	if test "$host_line" = "$source_line"
	then source_status=skipped; warn "source script already up-to-date, found source line '$source_line' in $source_host"
	elif sed $SED_OPTS "s@.*$source_tag.*@$source_line@" "$source_host"
	then source_status=updated; warn "updated source script in profile: $source_host"; clean $source_host
	else (( errors++ )); warn "failed to update source script in profile: $source_host"
	fi


elif grep -e "shellib.sh" "$source_host" 1> /dev/null; then

	if $FORCE; then
		if sed $SED_OPTS "s@.*shellib.sh.*@$source_line@" "$source_host"
		then source_status=updated; warn "forcefully updated altered source script in $source_host"; clean $source_host
		else (( errors++ )); warn "failed to update altered source script in $source_host"
		fi
	else source_status=skipped; warn "found altered source script in $source_host, skipping update"
	fi

else
	if echo "$source_line" >> "$source_host"
	then source_status=appended; warn "appended source script in $source_host"
	else (( errors++ )); warn "failed to append source script in $source_host"
	fi
fi

if $DIFF && ! test "$host_line" = "$source_line"
then
	cat 1>&2 <<-DIFF
	diff of source lines
	<$host_line
	---
	>$source_line
	DIFF
fi

# add spell files
for src in .vim/spell/*; do
	trg="$TRG_DIR/$src"
	if file_exists "$trg"; then
		if diff "$trg" "$src" > /dev/null
		then (( files_skipped++ )); warn "$trg and $src are equal, skipping to merge"
		else
			warn -n "updating spell file: $trg (..."

			if cp "$trg" "$trg~" 
			then warn -ne "\b\b\bbackup,..."
			else warn -e  "ERROR)"; warn "failed to backup spell file: $trg"; continue
			fi

			if cat "$src" "$trg" | sort -u > "$src".tmp; then
				warn -ne "\b\b\b sorted, merged,..."

				if diff "$trg" "$src".tmp > /dev/null
				then
					warn -e "\b\b\b skipped)"; (( files_skipped++ )); rm "$src".tmp
					warn "$trg and merge file are equal, skipping to merge"
				elif mv "$src".tmp "$trg"
				then warn -e "\b\b\b saved)"; (( files_updated++ ))
				else warn -e "\b\b\b ERROR)"; (( errors++ ))
				fi
			else
				warn -e "ERROR)"; (( errors++ ));
				warn "spell file merge failed: $trg <- $trg\.tmp"
			fi
		fi
	else
		if mkdir -p "`dirname $trg`" && cp -u "$src" "$trg"
		then (( files_created++ )); warn "spell file copied: $src -> $trg";
		else (( errors++ ));        warn "failed to copy spell file: $src -> $trg";
		fi
	fi
done

LOG_FILE=$SRC_DIR/install.log
LOG_FILE_PREV=$SRC_DIR/install.log

# print parsable install status
# (can be be used for detecting changes, e.g., in Ansible)
cat  <<-EOF
LINKS_CREATED:  $created
LINKS_UPDATED:  $updated
LINKS_SKIPPED:  $skipped
SOURCE_SCRIPT:  $source_status
FILES_CREATED:  $files_created
FILES_UPDATED:  $files_updated
FILES_SKIPPED:  $files_skipped
ERRORS:         $errors
EOF

# print parsable status summary
if (( errors > 0 ))
then echo "INSTALLATION FAILED";    exit 1
elif (( created == 0       )) && (( updated == 0       )) &&
	  (( files_created == 0 )) && (( files_updated == 0 )) &&
	  test "$source_status" = "skipped"
then echo "INSTALLATION SKIPPED";    exit 0
else echo "INSTALLATION SUCCESSFUL"; exit 0
fi

